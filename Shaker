shin-clone/
├── client/          # واجهة المستخدم (React Native)
├── server/          # الخلفية (Node.js + Express)
├── delivery-app/    # تطبيق السائقين (React Native)
└── admin-panel/     # لوحة التحكم (React)
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const orderRoutes = require('./routes/orders');
const userRoutes = require('./routes/users');
const driverRoutes = require('./routes/drivers');

const app = express();

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Routes
app.use('/api/orders', orderRoutes);
app.use('/api/users', userRoutes);
app.use('/api/drivers', driverRoutes);

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
const express = require('express');
const router = express.Router();
const Order = require('../models/Order');
const { authenticate } = require('../middleware/auth');

// إنشاء طلب جديد
router.post('/', authenticate, async (req, res) => {
  try {
    const { pickupLocation, deliveryLocation, items, price } = req.body;
    
    const newOrder = new Order({
      user: req.user.id,
      pickupLocation,
      deliveryLocation,
      items,
      price,
      status: 'pending'
    });

    await newOrder.save();
    res.json(newOrder);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
});

// الحصول على الطلبات
router.get('/', authenticate, async (req, res) => {
  try {
    const orders = await Order.find({ user: req.user.id });
    res.json(orders);
  } catch (err) {
    console.error(err.message);
    res.status(500).send('Server Error');
  }
});

module.exports = router;
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import HomeScreen from './screens/HomeScreen';
import OrderScreen from './screens/OrderScreen';
import TrackScreen from './screens/TrackScreen';
import LoginScreen from './screens/LoginScreen';

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Order" component={OrderScreen} />
        <Stack.Screen name="Track" component={TrackScreen} />
        <Stack.Screen name="Login" component={LoginScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}
import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet } from 'react-native';
import axios from 'axios';

const OrderScreen = ({ navigation }) => {
  const [pickup, setPickup] = useState('');
  const [destination, setDestination] = useState('');
  const [items, setItems] = useState('');

  const handleSubmit = async () => {
    try {
      const response = await axios.post('http://your-server/api/orders', {
        pickupLocation: pickup,
        deliveryLocation: destination,
        items: items.split(',').map(item => item.trim()),
        price: calculatePrice(items.split(',').length)
      });
      
      navigation.navigate('Track', { orderId: response.data._id });
    } catch (error) {
      console.error('Order error:', error);
    }
  };

  const calculatePrice = (itemCount) => {
    return 5 + (itemCount * 2); // تسعير بسيط
  };

  return (
    <View style={styles.container}>
      <Text>إنشاء طلب توصيل جديد</Text>
      
      <TextInput
        style={styles.input}
        placeholder="موقع الاستلام"
        value={pickup}
        onChangeText={setPickup}
      />
      
      <TextInput
        style={styles.input}
        placeholder="موقع التسليم"
        value={destination}
        onChangeText={setDestination}
      />
      
      <TextInput
        style={styles.input}
        placeholder="المنتجات (مفصولة بفاصلة)"
        value={items}
        onChangeText={setItems}
      />
      
      <Button title="تأكيد الطلب" onPress={handleSubmit} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { padding: 20 },
  input: { borderWidth: 1, marginBottom: 10, padding: 8 }
});

export default OrderScreen;
import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, StyleSheet } from 'react-native';
import axios from 'axios';

const DriverApp = () => {
  const [orders, setOrders] = useState([]);

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await axios.get('http://your-server/api/orders/available');
        setOrders(response.data);
      } catch (error) {
        console.error('Error fetching orders:', error);
      }
    };
    
    fetchOrders();
    const interval = setInterval(fetchOrders, 10000); // تحديث كل 10 ثواني
    
    return () => clearInterval(interval);
  }, []);

  const acceptOrder = async (orderId) => {
    try {
      await axios.put(`http://your-server/api/orders/${orderId}/accept`, {
        driverId: 'DRIVER_ID_HERE' // سيتم استبدالها بالهوية الحقيقية
      });
      setOrders(orders.filter(order => order._id !== orderId));
    } catch (error) {
      console.error('Error accepting order:', error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>الطلبات المتاحة</Text>
      
      <FlatList
        data={orders}
        keyExtractor={item => item._id}
        renderItem={({ item }) => (
          <View style={styles.orderCard}>
            <Text>من: {item.pickupLocation}</Text>
            <Text>إلى: {item.deliveryLocation}</Text>
            <Text>عدد العناصر: {item.items.length}</Text>
            <Text>السعر: {item.price} ريال</Text>
            <Button title="قبول الطلب" onPress={() => acceptOrder(item._id)} />
          </View>
        )}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { padding: 20 },
  title: { fontSize: 20, fontWeight: 'bold', marginBottom: 15 },
  orderCard: { borderWidth: 1, padding: 15, marginBottom: 10 }
});

export default DriverApp;
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const AdminDashboard = () => {
  const [orders, setOrders] = useState([]);
  const [drivers, setDrivers] = useState([]);
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [ordersRes, driversRes, usersRes] = await Promise.all([
          axios.get('/api/orders'),
          axios.get('/api/drivers'),
          axios.get('/api/users')
        ]);
        
        setOrders(ordersRes.data);
        setDrivers(driversRes.data);
        setUsers(usersRes.data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };
    
    fetchData();
  }, []);

  return (
    <div className="dashboard">
      <div className="stats">
        <div className="stat-card">
          <h3>إجمالي الطلبات</h3>
          <p>{orders.length}</p>
        </div>
        <div className="stat-card">
          <h3>السائقون</h3>
          <p>{drivers.length}</p>
        </div>
        <div className="stat-card">
          <h3>المستخدمون</h3>
          <p>{users.length}</p>
        </div>
      </div>

      <div className="recent-orders">
        <h2>أحدث الطلبات</h2>
        <table>
          <thead>
            <tr>
              <th>رقم الطلب</th>
              <th>المستخدم</th>
              <th>الحالة</th>
              <th>السعر</th>
            </tr>
          </thead>
          <tbody>
            {orders.slice(0, 5).map(order => (
              <tr key={order._id}>
                <td>{order._id.substring(0, 6)}</td>
                <td>{order.user.name}</td>
                <td>{order.status}</td>
                <td>{order.price} ريال</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminDashboard;
const mongoose = require('mongoose');

const OrderSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  driver: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Driver'
  },
  pickupLocation: {
    type: String,
    required: true
  },
  deliveryLocation: {
    type: String,
    required: true
  },
  items: {
    type: [String],
    required: true
  },
  price: {
    type: Number,
    required: true
  },
  status: {
    type: String,
    enum: ['pending', 'accepted', 'picked_up', 'delivered', 'cancelled'],
    default: 'pending'
  },
  createdAt: {
    type: Date,
    default: Date.now
  }
});

module.exports = mongoose.model('Order', OrderSchema);
